Create a fully functional web application for detecting fake news, tailored for scenarios like the India-Pakistan context, delivering a complete, working project using only HTML, CSS, and JavaScript (no frameworks like React) with the following detailed specifications:

Frontend Requirements:

Develop the frontend using plain HTML, CSS, and vanilla JavaScript (ES6+), ensuring compatibility with modern browsers (Chrome, Firefox, Edge).
Style the application using pure CSS to create a modern, clean, and professional design without external libraries (e.g., Tailwind CSS).
Design an intuitive and responsive user interface that includes:
A <textarea> for users to paste the full text of a news article (min-height: 150px, resizable, with placeholder: "Paste the article text here...").
An <input> field for users to paste a news article URL (with placeholder: "Enter the article URL (e.g., https://example.com/news)").
A "Verify" button styled with CSS (e.g., background: #2563eb, hover: #1e40af, rounded corners, white text) to trigger the fake news detection process.
A result display section (e.g., a <div>) that clearly shows the verification outcome (e.g., "This news is likely fake" in red or "This news is likely real" in green) with a confidence score (if available) and a brief explanation (e.g., "Based on text analysis").
A loading indicator (e.g., a CSS-animated spinner) displayed during verification to provide feedback to the user.
Ensure the UI is fully responsive, adapting seamlessly to desktop (min-width: 1024px), tablet (min-width: 768px), and mobile (min-width: 320px) devices using CSS media queries.
Implement client-side validation in JavaScript to check for empty inputs or invalid URLs (using regex for URL format) before sending requests, displaying user-friendly error messages (e.g., "Please provide an article or a valid URL") in a styled alert box.
Use JavaScript to manage UI state (e.g., input values, loading state, error messages, results) and update the DOM dynamically.
Structure the HTML with semantic elements (e.g., <main>, <section>) and organize CSS/JavaScript for maintainability (e.g., separate CSS rules, modular JavaScript functions).
Handle form submission using a button with an onclick event listener to trigger API calls, avoiding <form> tags due to potential sandbox restrictions.
Backend Requirements:

Develop the backend using Python with FastAPI to create a lightweight, asynchronous RESTful API.
Implement a single POST endpoint at /verify that:
Accepts JSON payloads with two optional fields: text (string, article text) and url (string, article URL). At least one must be provided.
If a URL is provided, use BeautifulSoup4 and requests to fetch the webpage, extract the main article text (e.g., from <p> tags or <article> elements, avoiding headers/footers), and clean it (remove HTML tags, scripts, and ads).
Processes the provided text (direct input or extracted from URL) to classify it as fake or real news.
Returns a JSON response with the following structure: { "result": "fake" | "real", "confidence": float, "message": string } (e.g., { "result": "fake", "confidence": 0.85, "message": "Detected misleading patterns in the text" }).
For fake news detection:
Use a pre-trained model from Hugging Face Transformers (e.g., distilbert-base-uncased fine-tuned for text classification or a fake news detection model like roberta-base if available) to analyze the text and predict authenticity.
If a suitable pre-trained model is unavailable, implement a placeholder classifier (e.g., a rule-based system checking for sensational keywords like "shocking" or "urgent," or a random classifier returning fake/real with a confidence score) that can be replaced later with a custom model trained on India-Pakistan-relevant news data.
Ensure the model or placeholder returns a confidence score (0.0 to 1.0) for transparency.
Handle errors gracefully:
Return 400 Bad Request for invalid inputs (e.g., empty text and URL, malformed URLs) with a JSON response: { "error": "Please provide valid article text or URL" }.
Return 500 Internal Server Error for processing failures (e.g., model errors, webpage fetching issues) with a JSON response: { "error": "Failed to process the request" }.
Log errors server-side for debugging without exposing sensitive details to the client.
Include CORS middleware in FastAPI to allow cross-origin requests from the frontend (e.g., set allow_origins=["*"] for development).
Ensure the backend is deployable (e.g., via uvicorn) and includes all necessary dependencies in a requirements.txt.
Frontend-Backend Communication:

Configure the frontend to send POST requests to the backend’s /verify endpoint using the Fetch API, including:
A JSON body with text (from textarea) and/or url (from input field).
Proper headers: { "Content-Type": "application/json" }.
Handle API responses in JavaScript:
On success (200 OK), parse the JSON response and update the result display with the result, confidence, and message by modifying the DOM.
On error (400, 500), display the error message from the JSON response in a styled alert box.
Show the loading spinner during the request and hide it once the response is received.
Implement timeout handling for API requests (e.g., 10 seconds) using Fetch’s AbortController to prevent hanging, displaying an error message like "Request timed out, please try again."
Additional Requirements:

Deliver a complete, end-to-end working project that processes both pasted articles and URLs, from user input to result display, with no missing components or non-functional code.
Include comprehensive error handling across the stack:
Frontend: Validate inputs, handle network errors, and display user-friendly messages.
Backend: Validate requests, handle webpage fetching errors, and manage model failures.
Provide a single HTML file (index.html) containing all HTML, CSS (in a <style> tag), and JavaScript (in a <script> tag), runnable in any modern browser without additional setup.
Provide a single Python script (app.py) for the backend, implementing the FastAPI server and fake news detection logic.
Provide a requirements.txt file listing all Python dependencies (e.g., fastapi, uvicorn, beautifulsoup4, requests, transformers).
Include inline comments in both frontend and backend code to explain key logic (e.g., API calls, text extraction, model usage).
Optimize for usability and performance:
Ensure fast API responses (e.g., cache model loading in the backend).
Minimize frontend code size by avoiding unnecessary JavaScript.
Design the app to be extensible for future enhancements (e.g., adding a custom model trained on India-Pakistan news data or supporting multiple languages).
Include a sample dataset or mock API response for testing if the model is a placeholder, ensuring the app is fully testable without external dependencies.
Provide instructions in the artifact comments for running the backend (e.g., pip install -r requirements.txt && uvicorn app:app --host 0.0.0.0 --port 8000).
Ensure the project is production-ready, with no broken functionality, and can be run locally by following simple setup instructions.
Deliverables:

A single HTML file (index.html) containing all frontend code (HTML, CSS, JavaScript), fully functional with API integration.
A single Python script (app.py) for the backend, implementing the FastAPI server and fake news detection logic.
A requirements.txt file listing all Python dependencies.
All artifacts wrapped in <xaiArtifact> tags with appropriate artifact_id, title, and contentType attributes.
This prompt ensures a robust, fully functional fake news detection web application using only HTML, CSS, and JavaScript for the frontend, with clear, actionable requirements and no incomplete or non-functional components.